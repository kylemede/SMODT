# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_orbit', [dirname(__file__)])
        except ImportError:
            import _orbit
            return _orbit
        if fp is not None:
            try:
                _mod = imp.load_module('_orbit', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _orbit = swig_import_helper()
    del swig_import_helper
else:
    import _orbit
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_orbit.ORBIT_H_swigconstant(_orbit)
ORBIT_H = _orbit.ORBIT_H
class Orbit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Orbit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Orbit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["testDouble"] = _orbit.Orbit_testDouble_set
    __swig_getmethods__["testDouble"] = _orbit.Orbit_testDouble_get
    if _newclass:
        testDouble = _swig_property(_orbit.Orbit_testDouble_get, _orbit.Orbit_testDouble_set)
    __swig_setmethods__["dataRealAry"] = _orbit.Orbit_dataRealAry_set
    __swig_getmethods__["dataRealAry"] = _orbit.Orbit_dataRealAry_get
    if _newclass:
        dataRealAry = _swig_property(_orbit.Orbit_dataRealAry_get, _orbit.Orbit_dataRealAry_set)
    __swig_setmethods__["dataRealAry_x"] = _orbit.Orbit_dataRealAry_x_set
    __swig_getmethods__["dataRealAry_x"] = _orbit.Orbit_dataRealAry_x_get
    if _newclass:
        dataRealAry_x = _swig_property(_orbit.Orbit_dataRealAry_x_get, _orbit.Orbit_dataRealAry_x_set)
    __swig_setmethods__["dataRealAry_y"] = _orbit.Orbit_dataRealAry_y_set
    __swig_getmethods__["dataRealAry_y"] = _orbit.Orbit_dataRealAry_y_get
    if _newclass:
        dataRealAry_y = _swig_property(_orbit.Orbit_dataRealAry_y_get, _orbit.Orbit_dataRealAry_y_set)

    def loadRealData(self, xx):
        return _orbit.Orbit_loadRealData(self, xx)

    def calculate(self, yy):
        return _orbit.Orbit_calculate(self, yy)

    def __init__(self):
        this = _orbit.new_Orbit()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _orbit.delete_Orbit
    __del__ = lambda self: None
Orbit_swigregister = _orbit.Orbit_swigregister
Orbit_swigregister(Orbit)


def testFunc(t):
    return _orbit.testFunc(t)
testFunc = _orbit.testFunc
# This file is compatible with both classic and new-style classes.


